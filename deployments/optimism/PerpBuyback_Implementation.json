{
  "address": "0xeC75b807167EFdB81A06C500D8A06E26b4fcb3AE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimableAdded",
          "type": "uint256"
        }
      ],
      "name": "ActiveAccountRedistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "perpAmount",
          "type": "uint256"
        }
      ],
      "name": "BuybackTriggered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimPerpAmount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimableRedeemed",
          "type": "uint256"
        }
      ],
      "name": "InactiveAccountCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inactiveUserCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activeUserCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inactiveShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inactiveBudget",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redistributedPerp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingBuybackUsdcAmount",
          "type": "uint256"
        }
      ],
      "name": "Redistribution2025Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShare",
          "type": "uint256"
        }
      ],
      "name": "UserSharesChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V3_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPerp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPerpBuybackPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainingBuybackUsdcAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserClaimableVePerpAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVePerp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usdcArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "perpArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vePerpArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "perpBuybackPoolArg",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redistribute_2025",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapInPerpBuybackPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapInUniswapV3Pool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x43409022443e86d519deaaf277beeae014380a5c1e61b90b584fc56878ae02de",
  "receipt": {
    "to": null,
    "from": "0xd5f9709DeB82e330513a3B1cbf71aC9198450a8B",
    "contractAddress": "0xeC75b807167EFdB81A06C500D8A06E26b4fcb3AE",
    "transactionIndex": 37,
    "gasUsed": "2046612",
    "logsBloom": "0x
    "blockHash": "0x8463900d972d00d662cfe387b1c30dc6719d096c4fc9e1a5c01c7c975d1f6fc7",
    "transactionHash": "0x43409022443e86d519deaaf277beeae014380a5c1e61b90b584fc56878ae02de",
    "logs": [],
    "blockNumber": 142803758,
    "cumulativeGasUsed": "14523795",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "93c08326ff72965f62d5636ce15fb2fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimableAdded\",\"type\":\"uint256\"}],\"name\":\"ActiveAccountRedistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perpAmount\",\"type\":\"uint256\"}],\"name\":\"BuybackTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimPerpAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimableRedeemed\",\"type\":\"uint256\"}],\"name\":\"InactiveAccountCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inactiveUserCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeUserCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inactiveShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inactiveBudget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redistributedPerp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBuybackUsdcAmount\",\"type\":\"uint256\"}],\"name\":\"Redistribution2025Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShare\",\"type\":\"uint256\"}],\"name\":\"UserSharesChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_V3_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPerp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPerpBuybackPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingBuybackUsdcAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserClaimableVePerpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVePerp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdcArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"perpArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vePerpArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"perpBuybackPoolArg\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistribute_2025\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapInPerpBuybackPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapInUniswapV3Pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"redistribute_2025()\":{\"details\":\"Background: The original buyback proposal (https://gov.perp.fi/t/920) states:      \\\"If a particular user becomes inactive and did not claim any compensation for more      than 1 year, or it becomes clear that the user doesn't want to claim, then the DAO      treasury multisig has the full right to decide whether to withdraw that PERP and      redistribute to the other users to speed up their pay offs.\\\"      After >1 year, 4 accounts remained inactive (no vePERP interaction). The DAO treasury      exercised this right to redistribute their allocations to active users.Actions performed:      - Removes 4 inactive accounts from the share map      - Redistributes their unclaimed PERP to active users using updated shares      - Reduces remaining USDC budget to account for removed allocations      - Emits detailed events for off-chain reconciliation      Safety: callable only once by owner (DAO treasury multisig)\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"redistribute_2025()\":{\"notice\":\"One-shot redistribution of inactive user allocations, authorized by governance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PerpBuyback.sol\":\"PerpBuyback\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableMapUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSetUpgradeable.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMapUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSetUpgradeable.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0xba40dd2868045311c0890e57bca07dd7ce0b62730289f90971cf29d275a44e80\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"src/PerpBuyback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { IPerpBuyback } from \\\"./interface/IPerpBuyback.sol\\\";\\nimport { IVePerp } from \\\"./interface/IVePerp.sol\\\";\\nimport { IPerpBuybackPool } from \\\"./interface/IPerpBuybackPool.sol\\\";\\nimport { IUniswapV3Router } from \\\"./interface/IUniswapV3Router.sol\\\";\\nimport { PerpBuybackStorage } from \\\"./storage/PerpBuybackStorage.sol\\\";\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { AddressUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport { EnumerableMapUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableMapUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract PerpBuyback is IPerpBuyback, ReentrancyGuardUpgradeable, Ownable2StepUpgradeable, PerpBuybackStorage {\\n    using AddressUpgradeable for address;\\n    using EnumerableMapUpgradeable for EnumerableMapUpgradeable.AddressToUintMap;\\n\\n    address public constant UNISWAP_V3_ROUTER = address(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n    address public constant WETH = address(0x4200000000000000000000000000000000000006);\\n    uint256 private constant WEEK = 7 * 86400;\\n    uint256 private constant SHARE_SCALE = 1_000_000;\\n\\n    // in USDC (6 decimals), 3,587,633.63 U\\n    uint256 private constant TOTAL_BUYBACK_USDC = 358_763_363 * 10 ** 4;\\n\\n    struct UserShare {\\n        address user;\\n        uint256 share;\\n    }\\n\\n    //\\n    // EXTERNAL NON-VIEW\\n    //\\n\\n    function initialize(\\n        address usdcArg,\\n        address perpArg,\\n        address vePerpArg,\\n        address perpBuybackPoolArg\\n    ) external initializer {\\n        // PB_UINC: usdc is not contract\\n        require(usdcArg.isContract(), \\\"PB_UINC\\\");\\n        // PB_PINC: perp is not contract\\n        require(perpArg.isContract(), \\\"PB_PINC\\\");\\n        // PB_VPINC: vePERP is not contract\\n        require(vePerpArg.isContract(), \\\"PB_VPINC\\\");\\n        // PB_PBPINC: perpBuybackPool is not contract\\n        require(perpBuybackPoolArg.isContract(), \\\"PB_PBPINC\\\");\\n\\n        _usdc = usdcArg;\\n        _perp = perpArg;\\n        _vePerp = vePerpArg;\\n        _perpBuybackPool = perpBuybackPoolArg;\\n\\n        // can reference here: https://docs.google.com/spreadsheets/d/1Ok1LiKi4ApwfzviEMUd6NhxTI0B7ewogITDsq_ts7fI/edit?usp=sharing\\n        _sharesByUser.set(0x000000ea89990a17Ec07a35Ac2BBb02214C50152, 215717);\\n        _sharesByUser.set(0xbb327eBA8fC6085E8639E378FE86c73546ddab2D, 174893);\\n        _sharesByUser.set(0xA0e04247d39eBc07f38ACca38Dc10E14fa8d6C98, 5705);\\n        _sharesByUser.set(0x9d9250586e0443b49CBc975aA51dFB739C8eC50D, 76943);\\n        _sharesByUser.set(0x39e6382ec12e06EfF56aead7b785a5d461B70e13, 66269);\\n        _sharesByUser.set(0x530deFD6c816809F54F6CfA6FE873646F6EcF930, 63850);\\n        _sharesByUser.set(0x353D7E185B1567b7C2A54e031357aa41a7BA2e1f, 56664);\\n        _sharesByUser.set(0x4D930F0E508EeDF38B19041225D8Af8c153bF5e2, 42530);\\n        _sharesByUser.set(0x4A3eb6fea600D7E48256BAdCbE2931DA9Fc3999a, 40177);\\n        _sharesByUser.set(0xe35Bc00cf7C9D085d08084f2A1213701D6f86BCb, 42586);\\n        _sharesByUser.set(0xB76bF854Ef3A9105A2FFe204608d06C7A5259604, 17964);\\n        _sharesByUser.set(0x70D781Bbf2a5454fe688452e2D27A9b71AA1e8AB, 31688);\\n        _sharesByUser.set(0x6A654dc73E4e7666648044149F3a8162FD327C55, 32719);\\n        _sharesByUser.set(0x89501EA15422Db2C483919AFEb960bE010a8839C, 30891);\\n        _sharesByUser.set(0x68D779947734306136ebcecfC4AfF6Eb6ea4F5D9, 7651);\\n        _sharesByUser.set(0x3F48b62e129326C1235891fdebaBe2f3451ddD2e, 20267);\\n        _sharesByUser.set(0xfD4Bd3416270F2A432797B82Ca919e6FBC37EBc5, 29512);\\n        _sharesByUser.set(0x8540078e825f1A7D1c12f3C8CD4dFD7A05FE2995, 27513);\\n        _sharesByUser.set(0xcAcC55289917abAF27eA98c51C9aF87c6F94f6Bf, 16461);\\n\\n        _remainingBuybackUsdcAmount = TOTAL_BUYBACK_USDC;\\n\\n        __Ownable2Step_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    function withdrawToken(address token, uint256 tokenAmount) external onlyOwner {\\n        if (token == _usdc || token == _perp) {\\n            // PB_RBUAGE: remaining buyback USDC amount not zero\\n            require(_remainingBuybackUsdcAmount == 0, \\\"PB_RBUANZ\\\");\\n        }\\n\\n        address owner = owner();\\n        IERC20Upgradeable(token).transfer(owner, tokenAmount);\\n    }\\n\\n    // NOTE: use fixed path for now, and this function will only trigger by owner, MEV is not our concern\\n    function swapInUniswapV3Pool() external onlyOwner {\\n        // PB_RBUAIZ: remaining buyback USDC amount is zero\\n        require(_remainingBuybackUsdcAmount > 0, \\\"PB_RBUAIZ\\\");\\n\\n        uint256 usdcBalance = IERC20Upgradeable(_usdc).balanceOf(address(this));\\n        uint256 buybackUsdcAmount = usdcBalance > _remainingBuybackUsdcAmount\\n            ? _remainingBuybackUsdcAmount\\n            : usdcBalance;\\n        _remainingBuybackUsdcAmount -= buybackUsdcAmount;\\n\\n        require(IERC20Upgradeable(_usdc).approve(UNISWAP_V3_ROUTER, buybackUsdcAmount));\\n\\n        // Fixed path: USDC -> WETH (0.05% pool), WETH -> PERP (0.3% pool)\\n        bytes memory path = abi.encodePacked(_usdc, uint24(500), WETH, uint24(3000), _perp);\\n        uint256 totalPerpBoughtThisTime = IUniswapV3Router(UNISWAP_V3_ROUTER).exactInput(\\n            IUniswapV3Router.ExactInputParams({\\n                path: path,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: buybackUsdcAmount,\\n                amountOutMinimum: 0\\n            })\\n        );\\n\\n        uint256 totalUserAmount = _sharesByUser.length();\\n        for (uint8 i = 0; i < totalUserAmount; i++) {\\n            (address user, uint256 shares) = _sharesByUser.at(i);\\n            uint256 perpBoughtThisTimeForUser = (totalPerpBoughtThisTime * shares) / SHARE_SCALE;\\n            _userClaimableVePerpAmount[user] += perpBoughtThisTimeForUser;\\n        }\\n\\n        emit BuybackTriggered(buybackUsdcAmount, totalPerpBoughtThisTime);\\n    }\\n\\n    // NOTE: this function is deprecated, but keep this in case we need it in the future\\n    function swapInPerpBuybackPool() external nonReentrant {\\n        // PB_RBUAIZ: remaining buyback USDC amount is zero\\n        require(_remainingBuybackUsdcAmount > 0, \\\"PB_RBUAIZ\\\");\\n\\n        uint256 usdcBalance = IERC20Upgradeable(_usdc).balanceOf(address(this));\\n        uint256 buybackUsdcAmount = usdcBalance > _remainingBuybackUsdcAmount\\n            ? _remainingBuybackUsdcAmount\\n            : usdcBalance;\\n        _remainingBuybackUsdcAmount -= buybackUsdcAmount;\\n\\n        address perpBuybackPool = _perpBuybackPool;\\n        require(IERC20Upgradeable(_usdc).approve(perpBuybackPool, buybackUsdcAmount));\\n\\n        uint256 totalPerpBoughtThisTime = IPerpBuybackPool(perpBuybackPool).swap(buybackUsdcAmount);\\n\\n        uint256 totalUserAmount = _sharesByUser.length();\\n        for (uint8 i = 0; i < totalUserAmount; i++) {\\n            (address user, uint256 shares) = _sharesByUser.at(i);\\n            uint256 perpBoughtThisTimeForUser = (totalPerpBoughtThisTime * shares) / SHARE_SCALE;\\n            _userClaimableVePerpAmount[user] += perpBoughtThisTimeForUser;\\n        }\\n\\n        emit BuybackTriggered(buybackUsdcAmount, totalPerpBoughtThisTime);\\n    }\\n\\n    /**\\n     * @notice One-shot redistribution of inactive user allocations, authorized by governance.\\n     *\\n     * @dev Background: The original buyback proposal (https://gov.perp.fi/t/920) states:\\n     *      \\\"If a particular user becomes inactive and did not claim any compensation for more\\n     *      than 1 year, or it becomes clear that the user doesn't want to claim, then the DAO\\n     *      treasury multisig has the full right to decide whether to withdraw that PERP and\\n     *      redistribute to the other users to speed up their pay offs.\\\"\\n     *\\n     *      After >1 year, 4 accounts remained inactive (no vePERP interaction). The DAO treasury\\n     *      exercised this right to redistribute their allocations to active users.\\n     *\\n     * @dev Actions performed:\\n     *      - Removes 4 inactive accounts from the share map\\n     *      - Redistributes their unclaimed PERP to active users using updated shares\\n     *      - Reduces remaining USDC budget to account for removed allocations\\n     *      - Emits detailed events for off-chain reconciliation\\n     *\\n     *      Safety: callable only once by owner (DAO treasury multisig)\\n     */\\n    function redistribute_2025() external nonReentrant onlyOwner {\\n        // Governance approved these four inactive accounts for removal; keep them in-line for readability.\\n        address[4] memory inactiveUsers = [\\n            address(0x000000ea89990a17Ec07a35Ac2BBb02214C50152),\\n            address(0xA0e04247d39eBc07f38ACca38Dc10E14fa8d6C98),\\n            address(0x39e6382ec12e06EfF56aead7b785a5d461B70e13),\\n            address(0x4A3eb6fea600D7E48256BAdCbE2931DA9Fc3999a)\\n        ];\\n\\n        // Safety check: user_point_epoch == 0 confirms the account never interacted with vePERP\\n        // (no claim/deposit/deposit_for), proving they remain inactive and safe to remove.\\n        IVePerp vePerp = IVePerp(_vePerp);\\n        for (uint256 i = 0; i < inactiveUsers.length; ++i) {\\n            require(vePerp.user_point_epoch(inactiveUsers[i]) == 0, \\\"Account has vePERP activity, cannot remove\\\");\\n        }\\n\\n        // each inactive account: sum their shares, prepare to move their claimable, and emit for audit trail.\\n        uint256 inactiveShare;\\n        uint256 inactiveClaimable;\\n        for (uint256 i = 0; i < inactiveUsers.length; ++i) {\\n            address user = inactiveUsers[i];\\n            (bool exists, uint256 share) = _sharesByUser.tryGet(user);\\n            require(exists, \\\"Inactive account must exist before redistribution\\\");\\n\\n            inactiveShare += share;\\n\\n            uint256 claimable = _userClaimableVePerpAmount[user];\\n            inactiveClaimable += claimable;\\n            _userClaimableVePerpAmount[user] = 0;\\n\\n            _sharesByUser.remove(user);\\n\\n            emit InactiveAccountCleared(user, share, claimable);\\n        }\\n\\n        // Prevents double execution: once the inactive accounts are removed this reverts on re-entry.\\n        require(inactiveShare > 0, \\\"No inactive share balance remains to redistribute\\\");\\n\\n        // https://docs.google.com/spreadsheets/d/1Ok1LiKi4ApwfzviEMUd6NhxTI0B7ewogITDsq_ts7fI/edit?gid=1240106799#gid=1240106799\\n        UserShare[15] memory activeUsers = [\\n            UserShare({ user: 0xbb327eBA8fC6085E8639E378FE86c73546ddab2D, share: 260_208 }),\\n            UserShare({ user: 0x9d9250586e0443b49CBc975aA51dFB739C8eC50D, share: 114_476 }),\\n            UserShare({ user: 0x530deFD6c816809F54F6CfA6FE873646F6EcF930, share: 94_997 }),\\n            UserShare({ user: 0x353D7E185B1567b7C2A54e031357aa41a7BA2e1f, share: 84_306 }),\\n            UserShare({ user: 0x4D930F0E508EeDF38B19041225D8Af8c153bF5e2, share: 63_277 }),\\n            UserShare({ user: 0xe35Bc00cf7C9D085d08084f2A1213701D6f86BCb, share: 63_358 }),\\n            UserShare({ user: 0xB76bF854Ef3A9105A2FFe204608d06C7A5259604, share: 26_725 }),\\n            UserShare({ user: 0x70D781Bbf2a5454fe688452e2D27A9b71AA1e8AB, share: 47_145 }),\\n            UserShare({ user: 0x6A654dc73E4e7666648044149F3a8162FD327C55, share: 48_680 }),\\n            UserShare({ user: 0x89501EA15422Db2C483919AFEb960bE010a8839C, share: 45_960 }),\\n            UserShare({ user: 0x68D779947734306136ebcecfC4AfF6Eb6ea4F5D9, share: 11_383 }),\\n            UserShare({ user: 0x3F48b62e129326C1235891fdebaBe2f3451ddD2e, share: 30_152 }),\\n            UserShare({ user: 0xfD4Bd3416270F2A432797B82Ca919e6FBC37EBc5, share: 43_908 }),\\n            UserShare({ user: 0x8540078e825f1A7D1c12f3C8CD4dFD7A05FE2995, share: 40_934 }),\\n            UserShare({ user: 0xcAcC55289917abAF27eA98c51C9aF87c6F94f6Bf, share: 24_491 })\\n        ];\\n        uint256 activeLength = activeUsers.length;\\n\\n        // Update the active share table exactly as approved.\\n        uint256 shareSum;\\n        for (uint256 i = 0; i < activeLength; ++i) {\\n            UserShare memory entry = activeUsers[i];\\n            (bool hadPrevious, uint256 previousShare) = _sharesByUser.tryGet(entry.user);\\n            shareSum += entry.share;\\n            _sharesByUser.set(entry.user, entry.share);\\n            emit UserSharesChanged(entry.user, hadPrevious ? previousShare : 0, entry.share);\\n        }\\n        require(shareSum == SHARE_SCALE, \\\"Active share table must sum to SHARE_SCALE\\\");\\n\\n        // Push claimable balances using the same pro-rata math as swap flows.\\n        uint256 redistributedPerp;\\n        uint256 totalUserAmount = _sharesByUser.length();\\n        for (uint8 i = 0; i < totalUserAmount; i++) {\\n            (address user, uint256 shares) = _sharesByUser.at(i);\\n            if (inactiveClaimable == 0) {\\n                continue;\\n            }\\n\\n            uint256 allocation = (inactiveClaimable * shares) / SHARE_SCALE;\\n            _userClaimableVePerpAmount[user] += allocation;\\n            emit ActiveAccountRedistributed(user, shares, allocation);\\n            redistributedPerp += allocation;\\n        }\\n\\n        // Adjust the USDC budget to account for inactive accounts removal.\\n        // Example: TOTAL_BUYBACK_USDC = 200; Alice and Bob each own 50%.\\n        // Initial state:\\n        //   - Total budget: 200 USDC (100 for Alice, 100 for Bob)\\n        //   - Already spent: 80 USDC on buybacks \\u2192 currentRemaining = 120 USDC\\n        //   - Historical PERP: $40 worth of PERP for Alice (unclaimed), 40 for Bob (in _userClaimableVePerpAmount)\\n        //\\n        // After removing inactive Alice:\\n        //   - Alice's total entitlement: inactiveBudget = 200 * 50% = 100 USDC\\n        //   - This includes BOTH:\\n        //     \\u2022 Past: 40 USDC worth of PERP\\n        //     \\u2022 Future: 60 USDC not yet bought back\\n        //   - Subtract 100 from remaining 120 \\u2192 leaves 20 USDC for Bob's future buybacks\\n        //   - Bob now receives: 40 (reclaimed) + his original 40 + future buybacks from 20 USDC\\n        //\\n        // Why this works: `inactiveBudget` represents inactive account's full allocation.\\n        // Subtracting it from `currentRemaining` simultaneously:\\n        //   1. Cancels her future allocation (60 USDC)\\n        //   2. Accounts for her historical share we just redistributed (40 USDC worth of PERP)\\n        uint256 inactiveBudget = (TOTAL_BUYBACK_USDC * inactiveShare) / SHARE_SCALE;\\n        uint256 currentRemaining = _remainingBuybackUsdcAmount;\\n        _remainingBuybackUsdcAmount = currentRemaining > inactiveBudget ? currentRemaining - inactiveBudget : 0;\\n\\n        // Final bookkeeping event captures counts, budgets, and leftover USDC for downstream reconciliation.\\n        emit Redistribution2025Executed(\\n            inactiveUsers.length,\\n            activeLength,\\n            inactiveShare,\\n            inactiveBudget,\\n            redistributedPerp,\\n            _remainingBuybackUsdcAmount\\n        );\\n    }\\n\\n    function claim() external nonReentrant {\\n        address user = msg.sender;\\n\\n        // PB_UNIUM: user is not in user map\\n        require(_sharesByUser.contains(user), \\\"PB_UNIUM\\\");\\n\\n        address vePerp = _vePerp;\\n        uint256 currentWeekStart = (block.timestamp / WEEK) * WEEK;\\n        uint256 lockEnd = IVePerp(vePerp).locked__end(user);\\n\\n        // PB_LET26W: end time less than 26 weeks\\n        require(lockEnd > currentWeekStart + 26 * WEEK, \\\"PB_ETL26W\\\");\\n\\n        uint256 userClaimableVePerpAmount = _userClaimableVePerpAmount[user];\\n        // PB_UCAIZ: user claimable amount is zero\\n        require(userClaimableVePerpAmount > 0, \\\"PB_UCAIZ\\\");\\n        _userClaimableVePerpAmount[user] = 0;\\n\\n        IERC20Upgradeable(_perp).approve(vePerp, userClaimableVePerpAmount);\\n        IVePerp(vePerp).deposit_for(user, userClaimableVePerpAmount);\\n\\n        emit Claimed(user, userClaimableVePerpAmount);\\n    }\\n\\n    //\\n    // EXTERNAL VIEW\\n    //\\n\\n    function getUsdc() external view override returns (address) {\\n        return _usdc;\\n    }\\n\\n    function getPerp() external view override returns (address) {\\n        return _perp;\\n    }\\n\\n    function getVePerp() external view override returns (address) {\\n        return _vePerp;\\n    }\\n\\n    function getPerpBuybackPool() external view override returns (address) {\\n        return _perpBuybackPool;\\n    }\\n\\n    function getRemainingBuybackUsdcAmount() external view override returns (uint256) {\\n        return _remainingBuybackUsdcAmount;\\n    }\\n\\n    function getUserClaimableVePerpAmount(address user) external view override returns (uint256) {\\n        return _userClaimableVePerpAmount[user];\\n    }\\n\\n    function getUserNum() external view returns (uint256) {\\n        return _sharesByUser.length();\\n    }\\n\\n    function getShares(address user) external view returns (uint256) {\\n        return _sharesByUser.get(user);\\n    }\\n\\n    function getUserByIndex(uint256 index) external view returns (address) {\\n        (address user, ) = _sharesByUser.at(index);\\n        return user;\\n    }\\n}\\n\",\"keccak256\":\"0x874183e20593fed35abe5f8d62ae185231811e266e848493e000366841fcfab2\",\"license\":\"MIT\"},\"src/interface/IPerpBuyback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPerpBuybackEvent {\\n    event BuybackTriggered(uint256 usdcAmount, uint256 perpAmount);\\n\\n    event Claimed(address user, uint256 claimPerpAmount);\\n\\n    event InactiveAccountCleared(address indexed user, uint256 previousShare, uint256 claimableRedeemed);\\n\\n    event UserSharesChanged(address indexed user, uint256 previousShare, uint256 newShare);\\n\\n    event ActiveAccountRedistributed(address indexed user, uint256 newShare, uint256 claimableAdded);\\n\\n    event Redistribution2025Executed(\\n        uint256 inactiveUserCount,\\n        uint256 activeUserCount,\\n        uint256 inactiveShare,\\n        uint256 inactiveBudget,\\n        uint256 redistributedPerp,\\n        uint256 remainingBuybackUsdcAmount\\n    );\\n}\\n\\ninterface IPerpBuyback is IPerpBuybackEvent {\\n    function getUsdc() external view returns (address);\\n\\n    function getPerp() external view returns (address);\\n\\n    function getVePerp() external view returns (address);\\n\\n    function getPerpBuybackPool() external view returns (address);\\n\\n    function getRemainingBuybackUsdcAmount() external view returns (uint256);\\n\\n    function getUserClaimableVePerpAmount(address) external view returns (uint256);\\n\\n    function redistribute_2025() external;\\n}\\n\",\"keccak256\":\"0x7077c50bd7292e94796665addea0a1184e3a275814695bf63116303b9c401867\",\"license\":\"MIT\"},\"src/interface/IPerpBuybackPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPerpBuybackPool {\\n    function swap(uint256 UsdcAmount) external returns (uint256 perpAmount);\\n\\n    function getUsdc() external view returns (address);\\n\\n    function getPerp() external view returns (address);\\n\\n    function getPerpBuyback() external view returns (address);\\n\\n    function getPerpChainlinkAggregator() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd28e39c4cfb8372f110772e941da3f1b613231dd2f538974a506f3dd63f8185e\",\"license\":\"MIT\"},\"src/interface/IUniswapV3Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IUniswapV3Router {\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xd39e4ed0b71a990a7ff2c147f6a3998908d48f959520c10342e80c717b1b3e28\",\"license\":\"MIT\"},\"src/interface/IVePerp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IVePerp {\\n    function deposit_for(address user, uint256 value) external;\\n\\n    function locked__end(address user) external view returns (uint256);\\n\\n    function user_point_epoch(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x804da83947e9666546e1aa563d5930f22396e4852569dd253660cc90ae268832\",\"license\":\"MIT\"},\"src/storage/PerpBuybackStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { EnumerableMapUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableMapUpgradeable.sol\\\";\\n\\nabstract contract PerpBuybackStorage {\\n    address internal _usdc;\\n\\n    address internal _perp;\\n\\n    address internal _vePerp;\\n\\n    address internal _perpBuybackPool;\\n\\n    uint256 internal _remainingBuybackUsdcAmount;\\n\\n    mapping(address => uint256) internal _userClaimableVePerpAmount;\\n\\n    // in 10e6 format\\n    EnumerableMapUpgradeable.AddressToUintMap internal _sharesByUser;\\n}\\n\",\"keccak256\":\"0x7148b8a2c4ebb72cddd4cc3dfd869f6e9a160043632b43c566f56bdc28d552d4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061240b806100206000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063e30c39781161007c578063e30c397814610257578063f04da65b14610268578063f07f31bd1461027b578063f2fde38b14610283578063f8c8765e14610296578063ff5d32fe146102a957600080fd5b80638da5cb5b1461020c5780639e281a981461021d578063ad5c464814610230578063cdce52061461023e578063da9012a81461024657600080fd5b80634e71d92d1161010a5780634e71d92d146101b957806354922e24146101c35780636403f1f0146101cb578063715018a6146101f457806379ba5097146101fc57806386f58cfd1461020457600080fd5b80630dee14f81461014757806312f3fe761461016a578063260095f71461017b5780633f23b0201461018d57806341c64a2f1461019e575b600080fd5b60ca546001600160a01b03165b60405161016191906120ce565b60405180910390f35b60c9546001600160a01b0316610154565b60cd545b604051908152602001610161565b60cc546001600160a01b0316610154565b61015473e592427a0aece92de3edee1f18e0157c0586156481565b6101c16102bc565b005b6101c161057b565b61017f6101d93660046120fe565b6001600160a01b0316600090815260ce602052604090205490565b6101c1610809565b6101c161081b565b6101c1610895565b6065546001600160a01b0316610154565b6101c161022b366004612119565b611150565b6101546006602160991b0181565b61017f611250565b60cb546001600160a01b0316610154565b6097546001600160a01b0316610154565b61017f6102763660046120fe565b611261565b6101c1611274565b6101c16102913660046120fe565b6115b1565b6101c16102a4366004612143565b611622565b6101546102b7366004612197565b611b53565b6102c4611b69565b336102d060cf82611bc2565b61030c5760405162461bcd60e51b815260206004820152600860248201526750425f554e49554d60c01b60448201526064015b60405180910390fd5b60cb546001600160a01b0316600062093a8061032881426121c6565b61033291906121e8565b90506000826001600160a01b031663adc63589856040518263ffffffff1660e01b815260040161036291906120ce565b602060405180830381865afa15801561037f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a391906121ff565b90506103b362093a80601a6121e8565b6103bd9083612218565b81116103f75760405162461bcd60e51b815260206004820152600960248201526850425f45544c32365760b81b6044820152606401610303565b6001600160a01b038416600090815260ce6020526040902054806104485760405162461bcd60e51b815260206004820152600860248201526728212faaa1a0a4ad60c11b6044820152606401610303565b6001600160a01b03808616600090815260ce60205260408082209190915560ca54905163095ea7b360e01b815291169063095ea7b39061048e908790859060040161222b565b6020604051808303816000875af11580156104ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d19190612244565b50604051631d23139f60e11b81526001600160a01b03851690633a46273e90610500908890859060040161222b565b600060405180830381600087803b15801561051a57600080fd5b505af115801561052e573d6000803e3d6000fd5b505050507fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a858260405161056392919061222b565b60405180910390a1505050505061057960018055565b565b610583611b69565b600060cd54116105a55760405162461bcd60e51b815260040161030390612266565b60c9546040516370a0823160e01b81526000916001600160a01b0316906370a08231906105d69030906004016120ce565b602060405180830381865afa1580156105f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061791906121ff565b9050600060cd54821161062a578161062e565b60cd545b90508060cd60008282546106429190612289565b909155505060cc5460c95460405163095ea7b360e01b81526001600160a01b03928316929091169063095ea7b390610680908490869060040161222b565b6020604051808303816000875af115801561069f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c39190612244565b6106cc57600080fd5b604051634a5c8c6f60e11b8152600481018390526000906001600160a01b038316906394b918de906024016020604051808303816000875af1158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a91906121ff565b9050600061074860cf611be4565b905060005b818160ff1610156107d25760008061076960cf60ff8516611bef565b90925090506000620f424061077e83886121e8565b61078891906121c6565b6001600160a01b038416600090815260ce60205260408120805492935083929091906107b5908490612218565b9250508190555050505080806107ca9061229c565b91505061074d565b5060408051858152602081018490527f24894234be47e9feac48ae0362f841cb41e53ca9365b40463ebe55dc62331cff9101610563565b610811611c0d565b6105796000611c67565b60975433906001600160a01b031681146108895760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610303565b61089281611c67565b50565b61089d611b69565b6108a5611c0d565b6040805160808101825270ea89990a17ec07a35ac2bbb02214c50152815273a0e04247d39ebc07f38acca38dc10e14fa8d6c9860208201527339e6382ec12e06eff56aead7b785a5d461b70e1391810191909152734a3eb6fea600d7e48256badcbe2931da9fc3999a606082015260cb546001600160a01b031660005b6004811015610a1e57816001600160a01b031663010ae75784836004811061094c5761094c6122bb565b60200201516040518263ffffffff1660e01b815260040161096d91906120ce565b602060405180830381865afa15801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae91906121ff565b15610a0e5760405162461bcd60e51b815260206004820152602a60248201527f4163636f756e7420686173207665504552502061637469766974792c2063616e6044820152696e6f742072656d6f766560b01b6064820152608401610303565b610a17816122d1565b9050610922565b5060008060005b6004811015610b72576000858260048110610a4257610a426122bb565b60200201519050600080610a5760cf84611c80565b9150915081610ac25760405162461bcd60e51b815260206004820152603160248201527f496e616374697665206163636f756e74206d757374206578697374206265666f6044820152703932903932b234b9ba3934b13aba34b7b760791b6064820152608401610303565b610acc8187612218565b6001600160a01b038416600090815260ce6020526040902054909650610af28187612218565b6001600160a01b038516600090815260ce60205260408120559550610b1860cf85611c98565b5060408051838152602081018390526001600160a01b038616917f531c351f82723db679dbb376ef3841c98cbbc909986017082aa9e3dbd4b8c899910160405180910390a25050505080610b6b906122d1565b9050610a25565b5060008211610bdd5760405162461bcd60e51b815260206004820152603160248201527f4e6f20696e6163746976652073686172652062616c616e63652072656d61696e6044820152707320746f2072656469737472696275746560781b6064820152608401610303565b604080516102208101825273bb327eba8fc6085e8639e378fe86c73546ddab2d6101e082019081526203f870610200830152815281518083018352739d9250586e0443b49cbc975aa51dfb739c8ec50d81526201bf2c602082810191909152808301919091528251808401845273530defd6c816809f54f6cfa6fe873646f6ecf93081526201731581830152828401528251808401845273353d7e185b1567b7c2a54e031357aa41a7ba2e1f81526201495281830152606083015282518084018452734d930f0e508eedf38b19041225d8af8c153bf5e2815261f72d8183015260808301528251808401845273e35bc00cf7c9d085d08084f2a1213701d6f86bcb815261f77e8183015260a08301528251808401845273b76bf854ef3a9105a2ffe204608d06c7a525960481526168658183015260c0830152825180840184527370d781bbf2a5454fe688452e2d27a9b71aa1e8ab815261b8298183015260e083015282518084018452736a654dc73e4e7666648044149f3a8162fd327c55815261be2881830152610100830152825180840184527389501ea15422db2c483919afeb960be010a8839c815261b38881830152610120830152825180840184527368d779947734306136ebcecfc4aff6eb6ea4f5d98152612c778183015261014083015282518084018452733f48b62e129326c1235891fdebabe2f3451ddd2e81526175c8818301526101608301528251808401845273fd4bd3416270f2a432797b82ca919e6fbc37ebc5815261ab848183015261018083015282518084018452738540078e825f1a7d1c12f3c8cd4dfd7a05fe29958152619fe6818301526101a0830152825180840190935273cacc55289917abaf27ea98c51c9af87c6f94f6bf8352615fab908301526101c0810191909152600f6000805b82811015610f495760008482600f8110610e9357610e936122bb565b60200201519050600080610eb5836000015160cf611c8090919063ffffffff16565b91509150826020015185610ec99190612218565b83516020850151919650610ee09160cf9190611cad565b5082516001600160a01b03167f233aca2c309b54b52e86697dae754528819c3546b163939eccb5c033cab12e0483610f19576000610f1b565b825b60208087015160408051938452918301520160405180910390a250505080610f42906122d1565b9050610e77565b50620f42408114610faf5760405162461bcd60e51b815260206004820152602a60248201527f416374697665207368617265207461626c65206d7573742073756d20746f2053604482015269484152455f5343414c4560b01b6064820152608401610303565b600080610fbc60cf611be4565b905060005b818160ff1610156110a257600080610fdd60cf60ff8516611bef565b9150915088600003610ff0575050611090565b6000620f4240611000838c6121e8565b61100a91906121c6565b6001600160a01b038416600090815260ce6020526040812080549293508392909190611037908490612218565b909155505060408051838152602081018390526001600160a01b038516917fac22c145563a1666d2320250f0d9a58efa4712ffe24759b3c9f92beb49c9d7e8910160405180910390a261108a8187612218565b95505050505b8061109a8161229c565b915050610fc1565b506000620f42406110b9896503434fa0cb306121e8565b6110c391906121c6565b60cd549091508181116110d75760006110e1565b6110e18282612289565b60cd8190556040805160048152602081018990528082018c9052606081018590526080810187905260a0810192909252517f3606d8dc872471d8d67a80050fb57ef8ecf1323332384ed6876c49ff4bbe46669181900360c00190a1505050505050505050505061057960018055565b611158611c0d565b60c9546001600160a01b0383811691161480611181575060ca546001600160a01b038381169116145b156111c25760cd54156111c25760405162461bcd60e51b815260206004820152600960248201526828212fa9212aa0a72d60b91b6044820152606401610303565b60006111d66065546001600160a01b031690565b60405163a9059cbb60e01b81529091506001600160a01b0384169063a9059cbb90611207908490869060040161222b565b6020604051808303816000875af1158015611226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124a9190612244565b50505050565b600061125c60cf611be4565b905090565b600061126e60cf83611ccb565b92915050565b61127c611c0d565b600060cd541161129e5760405162461bcd60e51b815260040161030390612266565b60c9546040516370a0823160e01b81526000916001600160a01b0316906370a08231906112cf9030906004016120ce565b602060405180830381865afa1580156112ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131091906121ff565b9050600060cd5482116113235781611327565b60cd545b90508060cd600082825461133b9190612289565b909155505060c95460405163095ea7b360e01b81526001600160a01b039091169063095ea7b3906113869073e592427a0aece92de3edee1f18e0157c0586156490859060040161222b565b6020604051808303816000875af11580156113a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c99190612244565b6113d257600080fd5b60c95460ca546040516bffffffffffffffffffffffff19606093841b81166020830152607d60ea1b6034830152600360611b602160f91b01603783015261017760eb1b604b8301529190921b16604e82015260009060620160408051601f1981840301815260a083018252808352306020840152428383015260608301859052600060808401819052915163c04b8d5960e01b8152909350909173e592427a0aece92de3edee1f18e0157c058615649163c04b8d5991611494916004016122ea565b6020604051808303816000875af11580156114b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d791906121ff565b905060006114e560cf611be4565b905060005b818160ff16101561156f5760008061150660cf60ff8516611bef565b90925090506000620f424061151b83886121e8565b61152591906121c6565b6001600160a01b038416600090815260ce6020526040812080549293508392909190611552908490612218565b9250508190555050505080806115679061229c565b9150506114ea565b5060408051858152602081018490527f24894234be47e9feac48ae0362f841cb41e53ca9365b40463ebe55dc62331cff91015b60405180910390a15050505050565b6115b9611c0d565b609780546001600160a01b0383166001600160a01b031990911681179091556115ea6065546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600054610100900460ff16158080156116425750600054600160ff909116105b80611663575061165130611ce0565b158015611663575060005460ff166001145b6116c65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610303565b6000805460ff1916600117905580156116e9576000805461ff0019166101001790555b6116fb856001600160a01b0316611ce0565b6117315760405162461bcd60e51b815260206004820152600760248201526650425f55494e4360c81b6044820152606401610303565b611743846001600160a01b0316611ce0565b6117795760405162461bcd60e51b815260206004820152600760248201526650425f50494e4360c81b6044820152606401610303565b61178b836001600160a01b0316611ce0565b6117c25760405162461bcd60e51b815260206004820152600860248201526750425f5650494e4360c01b6044820152606401610303565b6117d4826001600160a01b0316611ce0565b61180c5760405162461bcd60e51b815260206004820152600960248201526850425f504250494e4360b81b6044820152606401610303565b60c980546001600160a01b038088166001600160a01b03199283161790925560ca805487841690831617905560cb805486841690831617905560cc80549285169290911691909117905561187660cf70ea89990a17ec07a35ac2bbb02214c5015262034aa5611cad565b5061189a60cf73bb327eba8fc6085e8639e378fe86c73546ddab2d6202ab2d611cad565b506118bd60cf73a0e04247d39ebc07f38acca38dc10e14fa8d6c98611649611cad565b506118e160cf739d9250586e0443b49cbc975aa51dfb739c8ec50d62012c8f611cad565b5061190560cf7339e6382ec12e06eff56aead7b785a5d461b70e13620102dd611cad565b5061192860cf73530defd6c816809f54f6cfa6fe873646f6ecf93061f96a611cad565b5061194b60cf73353d7e185b1567b7c2a54e031357aa41a7ba2e1f61dd58611cad565b5061196e60cf734d930f0e508eedf38b19041225d8af8c153bf5e261a622611cad565b5061199160cf734a3eb6fea600d7e48256badcbe2931da9fc3999a619cf1611cad565b506119b460cf73e35bc00cf7c9d085d08084f2a1213701d6f86bcb61a65a611cad565b506119d760cf73b76bf854ef3a9105a2ffe204608d06c7a525960461462c611cad565b506119fa60cf7370d781bbf2a5454fe688452e2d27a9b71aa1e8ab617bc8611cad565b50611a1d60cf736a654dc73e4e7666648044149f3a8162fd327c55617fcf611cad565b50611a4060cf7389501ea15422db2c483919afeb960be010a8839c6178ab611cad565b50611a6360cf7368d779947734306136ebcecfc4aff6eb6ea4f5d9611de3611cad565b50611a8660cf733f48b62e129326c1235891fdebabe2f3451ddd2e614f2b611cad565b50611aa960cf73fd4bd3416270f2a432797b82ca919e6fbc37ebc5617348611cad565b50611acc60cf738540078e825f1a7d1c12f3c8cd4dfd7a05fe2995616b79611cad565b50611aef60cf73cacc55289917abaf27ea98c51c9af87c6f94f6bf61404d611cad565b506503434fa0cb3060cd55611b02611cef565b611b0a611d1e565b8015611b4c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016115a2565b5050505050565b600080611b6160cf84611bef565b509392505050565b600260015403611bbb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610303565b6002600155565b6000611bd7836001600160a01b038416611d4d565b9392505050565b60018055565b600061126e82611d59565b6000808080611bfe8686611d64565b909450925050505b9250929050565b6065546001600160a01b031633146105795760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610303565b609780546001600160a01b031916905561089281611d8f565b6000808080611bfe866001600160a01b038716611de1565b6000611bd7836001600160a01b038416611e1b565b6000611cc3846001600160a01b03851684611e38565b949350505050565b6000611bd7836001600160a01b038416611e55565b6001600160a01b03163b151590565b600054610100900460ff16611d165760405162461bcd60e51b815260040161030390612374565b610579611ec5565b600054610100900460ff16611d455760405162461bcd60e51b815260040161030390612374565b610579611ef5565b6000611bd78383611f1c565b600061126e82611f34565b60008080611d728585611f3e565b600081815260029690960160205260409095205494959350505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818152600283016020526040812054819080611e1057611e038585611d4d565b925060009150611c069050565b600192509050611c06565b60008181526002830160205260408120819055611bd78383611f4a565b60008281526002840160205260408120829055611cc38484611f56565b600081815260028301602052604081205480151580611e795750611e798484611d4d565b611bd75760405162461bcd60e51b815260206004820152601e60248201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b657900006044820152606401610303565b600054610100900460ff16611eec5760405162461bcd60e51b815260040161030390612374565b61057933611c67565b600054610100900460ff16611bde5760405162461bcd60e51b815260040161030390612374565b60008181526001830160205260408120541515611bd7565b600061126e825490565b6000611bd78383611f62565b6000611bd78383611f8c565b6000611bd7838361207f565b6000826000018281548110611f7957611f796122bb565b9060005260206000200154905092915050565b60008181526001830160205260408120548015612075576000611fb0600183612289565b8554909150600090611fc490600190612289565b9050818114612029576000866000018281548110611fe457611fe46122bb565b9060005260206000200154905080876000018481548110612007576120076122bb565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061203a5761203a6123bf565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061126e565b600091505061126e565b60008181526001830160205260408120546120c65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561126e565b50600061126e565b6001600160a01b0391909116815260200190565b80356001600160a01b03811681146120f957600080fd5b919050565b60006020828403121561211057600080fd5b611bd7826120e2565b6000806040838503121561212c57600080fd5b612135836120e2565b946020939093013593505050565b6000806000806080858703121561215957600080fd5b612162856120e2565b9350612170602086016120e2565b925061217e604086016120e2565b915061218c606086016120e2565b905092959194509250565b6000602082840312156121a957600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000826121e357634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761126e5761126e6121b0565b60006020828403121561221157600080fd5b5051919050565b8082018082111561126e5761126e6121b0565b6001600160a01b03929092168252602082015260400190565b60006020828403121561225657600080fd5b81518015158114611bd757600080fd5b60208082526009908201526828212fa9212aa0a4ad60b91b604082015260600190565b8181038181111561126e5761126e6121b0565b600060ff821660ff81036122b2576122b26121b0565b60010192915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016122e3576122e36121b0565b5060010190565b60006020808352835160a08285015280518060c086015260005b818110156123205782810184015186820160e001528301612304565b50600060e08287010152918501516001600160a01b0381166040860152916040860151606086015260608601516080860152608086015160a086015260e0601f19601f830116860101935050505092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603160045260246000fdfea264697066735822122050c60cc7e667672184a7ff5dcfa1d5fde9fb588c7e4fa2360b4c58f0efbfd97764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063e30c39781161007c578063e30c397814610257578063f04da65b14610268578063f07f31bd1461027b578063f2fde38b14610283578063f8c8765e14610296578063ff5d32fe146102a957600080fd5b80638da5cb5b1461020c5780639e281a981461021d578063ad5c464814610230578063cdce52061461023e578063da9012a81461024657600080fd5b80634e71d92d1161010a5780634e71d92d146101b957806354922e24146101c35780636403f1f0146101cb578063715018a6146101f457806379ba5097146101fc57806386f58cfd1461020457600080fd5b80630dee14f81461014757806312f3fe761461016a578063260095f71461017b5780633f23b0201461018d57806341c64a2f1461019e575b600080fd5b60ca546001600160a01b03165b60405161016191906120ce565b60405180910390f35b60c9546001600160a01b0316610154565b60cd545b604051908152602001610161565b60cc546001600160a01b0316610154565b61015473e592427a0aece92de3edee1f18e0157c0586156481565b6101c16102bc565b005b6101c161057b565b61017f6101d93660046120fe565b6001600160a01b0316600090815260ce602052604090205490565b6101c1610809565b6101c161081b565b6101c1610895565b6065546001600160a01b0316610154565b6101c161022b366004612119565b611150565b6101546006602160991b0181565b61017f611250565b60cb546001600160a01b0316610154565b6097546001600160a01b0316610154565b61017f6102763660046120fe565b611261565b6101c1611274565b6101c16102913660046120fe565b6115b1565b6101c16102a4366004612143565b611622565b6101546102b7366004612197565b611b53565b6102c4611b69565b336102d060cf82611bc2565b61030c5760405162461bcd60e51b815260206004820152600860248201526750425f554e49554d60c01b60448201526064015b60405180910390fd5b60cb546001600160a01b0316600062093a8061032881426121c6565b61033291906121e8565b90506000826001600160a01b031663adc63589856040518263ffffffff1660e01b815260040161036291906120ce565b602060405180830381865afa15801561037f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a391906121ff565b90506103b362093a80601a6121e8565b6103bd9083612218565b81116103f75760405162461bcd60e51b815260206004820152600960248201526850425f45544c32365760b81b6044820152606401610303565b6001600160a01b038416600090815260ce6020526040902054806104485760405162461bcd60e51b815260206004820152600860248201526728212faaa1a0a4ad60c11b6044820152606401610303565b6001600160a01b03808616600090815260ce60205260408082209190915560ca54905163095ea7b360e01b815291169063095ea7b39061048e908790859060040161222b565b6020604051808303816000875af11580156104ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d19190612244565b50604051631d23139f60e11b81526001600160a01b03851690633a46273e90610500908890859060040161222b565b600060405180830381600087803b15801561051a57600080fd5b505af115801561052e573d6000803e3d6000fd5b505050507fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a858260405161056392919061222b565b60405180910390a1505050505061057960018055565b565b610583611b69565b600060cd54116105a55760405162461bcd60e51b815260040161030390612266565b60c9546040516370a0823160e01b81526000916001600160a01b0316906370a08231906105d69030906004016120ce565b602060405180830381865afa1580156105f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061791906121ff565b9050600060cd54821161062a578161062e565b60cd545b90508060cd60008282546106429190612289565b909155505060cc5460c95460405163095ea7b360e01b81526001600160a01b03928316929091169063095ea7b390610680908490869060040161222b565b6020604051808303816000875af115801561069f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c39190612244565b6106cc57600080fd5b604051634a5c8c6f60e11b8152600481018390526000906001600160a01b038316906394b918de906024016020604051808303816000875af1158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a91906121ff565b9050600061074860cf611be4565b905060005b818160ff1610156107d25760008061076960cf60ff8516611bef565b90925090506000620f424061077e83886121e8565b61078891906121c6565b6001600160a01b038416600090815260ce60205260408120805492935083929091906107b5908490612218565b9250508190555050505080806107ca9061229c565b91505061074d565b5060408051858152602081018490527f24894234be47e9feac48ae0362f841cb41e53ca9365b40463ebe55dc62331cff9101610563565b610811611c0d565b6105796000611c67565b60975433906001600160a01b031681146108895760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610303565b61089281611c67565b50565b61089d611b69565b6108a5611c0d565b6040805160808101825270ea89990a17ec07a35ac2bbb02214c50152815273a0e04247d39ebc07f38acca38dc10e14fa8d6c9860208201527339e6382ec12e06eff56aead7b785a5d461b70e1391810191909152734a3eb6fea600d7e48256badcbe2931da9fc3999a606082015260cb546001600160a01b031660005b6004811015610a1e57816001600160a01b031663010ae75784836004811061094c5761094c6122bb565b60200201516040518263ffffffff1660e01b815260040161096d91906120ce565b602060405180830381865afa15801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae91906121ff565b15610a0e5760405162461bcd60e51b815260206004820152602a60248201527f4163636f756e7420686173207665504552502061637469766974792c2063616e6044820152696e6f742072656d6f766560b01b6064820152608401610303565b610a17816122d1565b9050610922565b5060008060005b6004811015610b72576000858260048110610a4257610a426122bb565b60200201519050600080610a5760cf84611c80565b9150915081610ac25760405162461bcd60e51b815260206004820152603160248201527f496e616374697665206163636f756e74206d757374206578697374206265666f6044820152703932903932b234b9ba3934b13aba34b7b760791b6064820152608401610303565b610acc8187612218565b6001600160a01b038416600090815260ce6020526040902054909650610af28187612218565b6001600160a01b038516600090815260ce60205260408120559550610b1860cf85611c98565b5060408051838152602081018390526001600160a01b038616917f531c351f82723db679dbb376ef3841c98cbbc909986017082aa9e3dbd4b8c899910160405180910390a25050505080610b6b906122d1565b9050610a25565b5060008211610bdd5760405162461bcd60e51b815260206004820152603160248201527f4e6f20696e6163746976652073686172652062616c616e63652072656d61696e6044820152707320746f2072656469737472696275746560781b6064820152608401610303565b604080516102208101825273bb327eba8fc6085e8639e378fe86c73546ddab2d6101e082019081526203f870610200830152815281518083018352739d9250586e0443b49cbc975aa51dfb739c8ec50d81526201bf2c602082810191909152808301919091528251808401845273530defd6c816809f54f6cfa6fe873646f6ecf93081526201731581830152828401528251808401845273353d7e185b1567b7c2a54e031357aa41a7ba2e1f81526201495281830152606083015282518084018452734d930f0e508eedf38b19041225d8af8c153bf5e2815261f72d8183015260808301528251808401845273e35bc00cf7c9d085d08084f2a1213701d6f86bcb815261f77e8183015260a08301528251808401845273b76bf854ef3a9105a2ffe204608d06c7a525960481526168658183015260c0830152825180840184527370d781bbf2a5454fe688452e2d27a9b71aa1e8ab815261b8298183015260e083015282518084018452736a654dc73e4e7666648044149f3a8162fd327c55815261be2881830152610100830152825180840184527389501ea15422db2c483919afeb960be010a8839c815261b38881830152610120830152825180840184527368d779947734306136ebcecfc4aff6eb6ea4f5d98152612c778183015261014083015282518084018452733f48b62e129326c1235891fdebabe2f3451ddd2e81526175c8818301526101608301528251808401845273fd4bd3416270f2a432797b82ca919e6fbc37ebc5815261ab848183015261018083015282518084018452738540078e825f1a7d1c12f3c8cd4dfd7a05fe29958152619fe6818301526101a0830152825180840190935273cacc55289917abaf27ea98c51c9af87c6f94f6bf8352615fab908301526101c0810191909152600f6000805b82811015610f495760008482600f8110610e9357610e936122bb565b60200201519050600080610eb5836000015160cf611c8090919063ffffffff16565b91509150826020015185610ec99190612218565b83516020850151919650610ee09160cf9190611cad565b5082516001600160a01b03167f233aca2c309b54b52e86697dae754528819c3546b163939eccb5c033cab12e0483610f19576000610f1b565b825b60208087015160408051938452918301520160405180910390a250505080610f42906122d1565b9050610e77565b50620f42408114610faf5760405162461bcd60e51b815260206004820152602a60248201527f416374697665207368617265207461626c65206d7573742073756d20746f2053604482015269484152455f5343414c4560b01b6064820152608401610303565b600080610fbc60cf611be4565b905060005b818160ff1610156110a257600080610fdd60cf60ff8516611bef565b9150915088600003610ff0575050611090565b6000620f4240611000838c6121e8565b61100a91906121c6565b6001600160a01b038416600090815260ce6020526040812080549293508392909190611037908490612218565b909155505060408051838152602081018390526001600160a01b038516917fac22c145563a1666d2320250f0d9a58efa4712ffe24759b3c9f92beb49c9d7e8910160405180910390a261108a8187612218565b95505050505b8061109a8161229c565b915050610fc1565b506000620f42406110b9896503434fa0cb306121e8565b6110c391906121c6565b60cd549091508181116110d75760006110e1565b6110e18282612289565b60cd8190556040805160048152602081018990528082018c9052606081018590526080810187905260a0810192909252517f3606d8dc872471d8d67a80050fb57ef8ecf1323332384ed6876c49ff4bbe46669181900360c00190a1505050505050505050505061057960018055565b611158611c0d565b60c9546001600160a01b0383811691161480611181575060ca546001600160a01b038381169116145b156111c25760cd54156111c25760405162461bcd60e51b815260206004820152600960248201526828212fa9212aa0a72d60b91b6044820152606401610303565b60006111d66065546001600160a01b031690565b60405163a9059cbb60e01b81529091506001600160a01b0384169063a9059cbb90611207908490869060040161222b565b6020604051808303816000875af1158015611226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124a9190612244565b50505050565b600061125c60cf611be4565b905090565b600061126e60cf83611ccb565b92915050565b61127c611c0d565b600060cd541161129e5760405162461bcd60e51b815260040161030390612266565b60c9546040516370a0823160e01b81526000916001600160a01b0316906370a08231906112cf9030906004016120ce565b602060405180830381865afa1580156112ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131091906121ff565b9050600060cd5482116113235781611327565b60cd545b90508060cd600082825461133b9190612289565b909155505060c95460405163095ea7b360e01b81526001600160a01b039091169063095ea7b3906113869073e592427a0aece92de3edee1f18e0157c0586156490859060040161222b565b6020604051808303816000875af11580156113a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c99190612244565b6113d257600080fd5b60c95460ca546040516bffffffffffffffffffffffff19606093841b81166020830152607d60ea1b6034830152600360611b602160f91b01603783015261017760eb1b604b8301529190921b16604e82015260009060620160408051601f1981840301815260a083018252808352306020840152428383015260608301859052600060808401819052915163c04b8d5960e01b8152909350909173e592427a0aece92de3edee1f18e0157c058615649163c04b8d5991611494916004016122ea565b6020604051808303816000875af11580156114b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d791906121ff565b905060006114e560cf611be4565b905060005b818160ff16101561156f5760008061150660cf60ff8516611bef565b90925090506000620f424061151b83886121e8565b61152591906121c6565b6001600160a01b038416600090815260ce6020526040812080549293508392909190611552908490612218565b9250508190555050505080806115679061229c565b9150506114ea565b5060408051858152602081018490527f24894234be47e9feac48ae0362f841cb41e53ca9365b40463ebe55dc62331cff91015b60405180910390a15050505050565b6115b9611c0d565b609780546001600160a01b0383166001600160a01b031990911681179091556115ea6065546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600054610100900460ff16158080156116425750600054600160ff909116105b80611663575061165130611ce0565b158015611663575060005460ff166001145b6116c65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610303565b6000805460ff1916600117905580156116e9576000805461ff0019166101001790555b6116fb856001600160a01b0316611ce0565b6117315760405162461bcd60e51b815260206004820152600760248201526650425f55494e4360c81b6044820152606401610303565b611743846001600160a01b0316611ce0565b6117795760405162461bcd60e51b815260206004820152600760248201526650425f50494e4360c81b6044820152606401610303565b61178b836001600160a01b0316611ce0565b6117c25760405162461bcd60e51b815260206004820152600860248201526750425f5650494e4360c01b6044820152606401610303565b6117d4826001600160a01b0316611ce0565b61180c5760405162461bcd60e51b815260206004820152600960248201526850425f504250494e4360b81b6044820152606401610303565b60c980546001600160a01b038088166001600160a01b03199283161790925560ca805487841690831617905560cb805486841690831617905560cc80549285169290911691909117905561187660cf70ea89990a17ec07a35ac2bbb02214c5015262034aa5611cad565b5061189a60cf73bb327eba8fc6085e8639e378fe86c73546ddab2d6202ab2d611cad565b506118bd60cf73a0e04247d39ebc07f38acca38dc10e14fa8d6c98611649611cad565b506118e160cf739d9250586e0443b49cbc975aa51dfb739c8ec50d62012c8f611cad565b5061190560cf7339e6382ec12e06eff56aead7b785a5d461b70e13620102dd611cad565b5061192860cf73530defd6c816809f54f6cfa6fe873646f6ecf93061f96a611cad565b5061194b60cf73353d7e185b1567b7c2a54e031357aa41a7ba2e1f61dd58611cad565b5061196e60cf734d930f0e508eedf38b19041225d8af8c153bf5e261a622611cad565b5061199160cf734a3eb6fea600d7e48256badcbe2931da9fc3999a619cf1611cad565b506119b460cf73e35bc00cf7c9d085d08084f2a1213701d6f86bcb61a65a611cad565b506119d760cf73b76bf854ef3a9105a2ffe204608d06c7a525960461462c611cad565b506119fa60cf7370d781bbf2a5454fe688452e2d27a9b71aa1e8ab617bc8611cad565b50611a1d60cf736a654dc73e4e7666648044149f3a8162fd327c55617fcf611cad565b50611a4060cf7389501ea15422db2c483919afeb960be010a8839c6178ab611cad565b50611a6360cf7368d779947734306136ebcecfc4aff6eb6ea4f5d9611de3611cad565b50611a8660cf733f48b62e129326c1235891fdebabe2f3451ddd2e614f2b611cad565b50611aa960cf73fd4bd3416270f2a432797b82ca919e6fbc37ebc5617348611cad565b50611acc60cf738540078e825f1a7d1c12f3c8cd4dfd7a05fe2995616b79611cad565b50611aef60cf73cacc55289917abaf27ea98c51c9af87c6f94f6bf61404d611cad565b506503434fa0cb3060cd55611b02611cef565b611b0a611d1e565b8015611b4c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016115a2565b5050505050565b600080611b6160cf84611bef565b509392505050565b600260015403611bbb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610303565b6002600155565b6000611bd7836001600160a01b038416611d4d565b9392505050565b60018055565b600061126e82611d59565b6000808080611bfe8686611d64565b909450925050505b9250929050565b6065546001600160a01b031633146105795760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610303565b609780546001600160a01b031916905561089281611d8f565b6000808080611bfe866001600160a01b038716611de1565b6000611bd7836001600160a01b038416611e1b565b6000611cc3846001600160a01b03851684611e38565b949350505050565b6000611bd7836001600160a01b038416611e55565b6001600160a01b03163b151590565b600054610100900460ff16611d165760405162461bcd60e51b815260040161030390612374565b610579611ec5565b600054610100900460ff16611d455760405162461bcd60e51b815260040161030390612374565b610579611ef5565b6000611bd78383611f1c565b600061126e82611f34565b60008080611d728585611f3e565b600081815260029690960160205260409095205494959350505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818152600283016020526040812054819080611e1057611e038585611d4d565b925060009150611c069050565b600192509050611c06565b60008181526002830160205260408120819055611bd78383611f4a565b60008281526002840160205260408120829055611cc38484611f56565b600081815260028301602052604081205480151580611e795750611e798484611d4d565b611bd75760405162461bcd60e51b815260206004820152601e60248201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b657900006044820152606401610303565b600054610100900460ff16611eec5760405162461bcd60e51b815260040161030390612374565b61057933611c67565b600054610100900460ff16611bde5760405162461bcd60e51b815260040161030390612374565b60008181526001830160205260408120541515611bd7565b600061126e825490565b6000611bd78383611f62565b6000611bd78383611f8c565b6000611bd7838361207f565b6000826000018281548110611f7957611f796122bb565b9060005260206000200154905092915050565b60008181526001830160205260408120548015612075576000611fb0600183612289565b8554909150600090611fc490600190612289565b9050818114612029576000866000018281548110611fe457611fe46122bb565b9060005260206000200154905080876000018481548110612007576120076122bb565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061203a5761203a6123bf565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061126e565b600091505061126e565b60008181526001830160205260408120546120c65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561126e565b50600061126e565b6001600160a01b0391909116815260200190565b80356001600160a01b03811681146120f957600080fd5b919050565b60006020828403121561211057600080fd5b611bd7826120e2565b6000806040838503121561212c57600080fd5b612135836120e2565b946020939093013593505050565b6000806000806080858703121561215957600080fd5b612162856120e2565b9350612170602086016120e2565b925061217e604086016120e2565b915061218c606086016120e2565b905092959194509250565b6000602082840312156121a957600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000826121e357634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761126e5761126e6121b0565b60006020828403121561221157600080fd5b5051919050565b8082018082111561126e5761126e6121b0565b6001600160a01b03929092168252602082015260400190565b60006020828403121561225657600080fd5b81518015158114611bd757600080fd5b60208082526009908201526828212fa9212aa0a4ad60b91b604082015260600190565b8181038181111561126e5761126e6121b0565b600060ff821660ff81036122b2576122b26121b0565b60010192915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016122e3576122e36121b0565b5060010190565b60006020808352835160a08285015280518060c086015260005b818110156123205782810184015186820160e001528301612304565b50600060e08287010152918501516001600160a01b0381166040860152916040860151606086015260608601516080860152608086015160a086015260e0601f19601f830116860101935050505092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603160045260246000fdfea264697066735822122050c60cc7e667672184a7ff5dcfa1d5fde9fb588c7e4fa2360b4c58f0efbfd97764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "redistribute_2025()": {
        "details": "Background: The original buyback proposal (https://gov.perp.fi/t/920) states:      \"If a particular user becomes inactive and did not claim any compensation for more      than 1 year, or it becomes clear that the user doesn't want to claim, then the DAO      treasury multisig has the full right to decide whether to withdraw that PERP and      redistribute to the other users to speed up their pay offs.\"      After >1 year, 4 accounts remained inactive (no vePERP interaction). The DAO treasury      exercised this right to redistribute their allocations to active users.Actions performed:      - Removes 4 inactive accounts from the share map      - Redistributes their unclaimed PERP to active users using updated shares      - Reduces remaining USDC budget to account for removed allocations      - Emits detailed events for off-chain reconciliation      Safety: callable only once by owner (DAO treasury multisig)"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "redistribute_2025()": {
        "notice": "One-shot redistribution of inactive user allocations, authorized by governance."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 347,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 350,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 523,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 581,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 985,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 219,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 339,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 128,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 207,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5035,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "_usdc",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 5037,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "_perp",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 5039,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "_vePerp",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 5041,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "_perpBuybackPool",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 5043,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "_remainingBuybackUsdcAmount",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 5047,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "_userClaimableVePerpAmount",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5050,
        "contract": "src/PerpBuyback.sol:PerpBuyback",
        "label": "_sharesByUser",
        "offset": 0,
        "slot": "207",
        "type": "t_struct(AddressToUintMap)1676_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressToUintMap)1676_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMapUpgradeable.AddressToUintMap",
        "members": [
          {
            "astId": 1675,
            "contract": "src/PerpBuyback.sol:PerpBuyback",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)1002_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Set)2313_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Bytes32Set",
        "members": [
          {
            "astId": 2312,
            "contract": "src/PerpBuyback.sol:PerpBuyback",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2119_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)1002_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMapUpgradeable.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 997,
            "contract": "src/PerpBuyback.sol:PerpBuyback",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)2313_storage"
          },
          {
            "astId": 1001,
            "contract": "src/PerpBuyback.sol:PerpBuyback",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2119_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2114,
            "contract": "src/PerpBuyback.sol:PerpBuyback",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2118,
            "contract": "src/PerpBuyback.sol:PerpBuyback",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}